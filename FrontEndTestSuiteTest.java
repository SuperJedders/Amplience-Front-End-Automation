// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
public class FrontEndTestSuiteTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    driver = new ChromeDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void frontEndNavigationFollowersVerification() {
    // Test name: Front End Navigation Followers Verification
    // Step # | name | target | value | comment
    // 1 | open | https://github.com/6wl |  | 
    driver.get("https://github.com/6wl");
    // 2 | setWindowSize | 976x1040 |  | 
    driver.manage().window().setSize(new Dimension(976, 1040));
    // 3 | verifyText | css=.mb-3 > .Link--secondary:nth-child(1) | 13 followers | Verify field included to ensure there is a value regardless if it matches the input variable.
    assertThat(driver.findElement(By.cssSelector(".mb-3 > .Link--secondary:nth-child(1)")).getText(), is("13 followers"));
    // 4 | assertText | css=.mb-3 > .Link--secondary:nth-child(1) | 13 followers | Assert command included to trigger a true or false result based on the variable required. As the follower count could change regularly, having an asset command in would lead to multiple fails so it would be best to disable/remove this step.
    assertThat(driver.findElement(By.cssSelector(".mb-3 > .Link--secondary:nth-child(1)")).getText(), is("13 followers"));
    // 5 | close |  |  | 
    driver.close();
  }
  @Test
  public void frontEndNavigationFollowingCheck() {
    // Test name: Front End Navigation Following Check
    // Step # | name | target | value | comment
    // 1 | open | https://github.com/6wl |  | 
    driver.get("https://github.com/6wl");
    // 2 | setWindowSize | 976x1040 |  | 
    driver.manage().window().setSize(new Dimension(976, 1040));
    // 3 | verifyText | css=.Link--secondary:nth-child(2) | 29 following | Verify field included to ensure there is a value regardless if it matches the input variable.
    assertThat(driver.findElement(By.cssSelector(".Link--secondary:nth-child(2)")).getText(), is("29 following"));
    // 4 | assertText | css=.Link--secondary:nth-child(2) | 29 following | Assert command included to trigger a true or false result based on the variable required. As the Following count could change regularly, having an asset command in would lead to multiple fails so it would be best to disable/remove this step.
    assertThat(driver.findElement(By.cssSelector(".Link--secondary:nth-child(2)")).getText(), is("29 following"));
    // 5 | close |  |  | 
    driver.close();
  }
  @Test
  public void frontEndNavigationFullNameVerification() {
    // Test name: Front End Navigation Full Name Verification
    // Step # | name | target | value | comment
    // 1 | open | https://github.com/6wl |  | 
    driver.get("https://github.com/6wl");
    // 2 | setWindowSize | 976x1040 |  | 
    driver.manage().window().setSize(new Dimension(976, 1040));
    // 3 | verifyText | css=.p-name | Gregory Loscombe | Verify command included to ensure there is a value regardless of true or false result against variable.
    assertThat(driver.findElement(By.cssSelector(".p-name")).getText(), is("Gregory Loscombe"));
    // 4 | assertText | css=.p-name | Gregory Loscombe | Assert command included to prove a true or false result based on the input variable.
    assertThat(driver.findElement(By.cssSelector(".p-name")).getText(), is("Gregory Loscombe"));
    // 5 | close |  |  | 
    driver.close();
  }
  @Test
  public void frontEndNavigationLocationVerification() {
    // Test name: Front End Navigation Location Verification
    // Step # | name | target | value | comment
    // 1 | open | https://github.com/6wl |  | 
    driver.get("https://github.com/6wl");
    // 2 | setWindowSize | 976x1040 |  | 
    driver.manage().window().setSize(new Dimension(976, 1040));
    // 3 | mouseOver | linkText=Learn how we count contributions |  | 
    {
      WebElement element = driver.findElement(By.linkText("Learn how we count contributions"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element).perform();
    }
    // 4 | verifyText | css=.p-label | Manchester | Verify command included to ensure there is a value regardless of true or false result against variable.
    assertThat(driver.findElement(By.cssSelector(".p-label")).getText(), is("Manchester"));
    // 5 | assertText | css=.p-label | Manchester | Assert command included to prove a true or false result based on the input variable.
    assertThat(driver.findElement(By.cssSelector(".p-label")).getText(), is("Manchester"));
    // 6 | close |  |  | 
    driver.close();
  }
  @Test
  public void frontEndNavigationPublicReposVerification() {
    // Test name: Front End Navigation Public Repos Verification
    // Step # | name | target | value | comment
    // 1 | open | https://github.com/6wl |  | 
    driver.get("https://github.com/6wl");
    // 2 | setWindowSize | 976x1040 |  | 
    driver.manage().window().setSize(new Dimension(976, 1040));
    // 3 | click | css=.width-full .UnderlineNav-item:nth-child(2) |  | 
    driver.findElement(By.cssSelector(".width-full .UnderlineNav-item:nth-child(2)")).click();
    // 4 | mouseOver | linkText=configs |  | 
    {
      WebElement element = driver.findElement(By.linkText("configs"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element).perform();
    }
    // 5 | verifyText | css=.width-full .selected > .Counter | 7 | Verify command included to ensure there is a value regardless of true or false result against variable.
    assertThat(driver.findElement(By.cssSelector(".width-full .selected > .Counter")).getText(), is("7"));
    // 6 | assertText | css=.width-full .selected > .Counter | 7 | Assert command included to prove a true or false result based on the input variable.
    assertThat(driver.findElement(By.cssSelector(".width-full .selected > .Counter")).getText(), is("7"));
    // 7 | close |  |  | 
    driver.close();
  }
}
